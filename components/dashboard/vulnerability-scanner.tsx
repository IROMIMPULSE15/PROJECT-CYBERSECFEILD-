"use client"

import { useState, useEffect } from "react"
import { Bug, AlertTriangle, CheckCircle, XCircle, Search, Database, Code, Lock } from "lucide-react"

interface Vulnerability {
  id: string
  type: string
  severity: "low" | "medium" | "high" | "critical"
  description: string
  location: string
  cve: string
  solution: string
  discovered: Date
  status: "open" | "patched" | "investigating"
}

export function VulnerabilityScanner() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([
    {
      id: "1",
      type: "SQL Injection",
      severity: "high",
      description: "Potential SQL injection vulnerability in user input field",
      location: "/api/users/search",
      cve: "CVE-2024-0001",
      solution: "Implement parameterized queries and input validation",
      discovered: new Date(Date.now() - 2 * 60 * 60 * 1000),
      status: "investigating",
    },
    {
      id: "2",
      type: "XSS Vulnerability",
      severity: "medium",
      description: "Cross-site scripting vulnerability in comment system",
      location: "/comments/display",
      cve: "CVE-2024-0002",
      solution: "Sanitize user input and implement Content Security Policy",
      discovered: new Date(Date.now() - 5 * 60 * 60 * 1000),
      status: "open",
    },
    {
      id: "3",
      type: "Outdated Dependencies",
      severity: "critical",
      description: "Critical security vulnerability in outdated JavaScript library",
      location: "package.json",
      cve: "CVE-2024-0003",
      solution: "Update to latest version of affected library",
      discovered: new Date(Date.now() - 1 * 60 * 60 * 1000),
      status: "open",
    },
  ])

  const [scanStats, setScanStats] = useState({
    totalScanned: 1247,
    vulnerabilitiesFound: 23,
    criticalIssues: 3,
    patchedIssues: 156,
    lastScan: new Date(),
  })

  const [scanning, setScanning] = useState(false)
  const [scanProgress, setScanProgress] = useState(0)

  useEffect(() => {
    const interval = setInterval(() => {
      // Simulate new vulnerability discovery
      if (Math.random() > 0.9) {
        const vulnTypes = [
          "SQL Injection",
          "XSS",
          "CSRF",
          "Directory Traversal",
          "Buffer Overflow",
          "Authentication Bypass",
        ]
        const severities: ("low" | "medium" | "high" | "critical")[] = ["low", "medium", "high", "critical"]
        const locations = ["/api/auth", "/admin/panel", "/user/profile", "/data/export", "/file/upload"]

        const newVuln: Vulnerability = {
          id: Date.now().toString(),
          type: vulnTypes[Math.floor(Math.random() * vulnTypes.length)],
          severity: severities[Math.floor(Math.random() * severities.length)],
          description: "Newly discovered security vulnerability requiring immediate attention",
          location: locations[Math.floor(Math.random() * locations.length)],
          cve: `CVE-2024-${String(Math.floor(Math.random() * 9999)).padStart(4, "0")}`,
          solution: "Apply security patch and review code implementation",
          discovered: new Date(),
          status: "open",
        }

        setVulnerabilities((prev) => [newVuln, ...prev.slice(0, 9)])
        setScanStats((prev) => ({
          ...prev,
          vulnerabilitiesFound: prev.vulnerabilitiesFound + 1,
          criticalIssues: prev.criticalIssues + (newVuln.severity === "critical" ? 1 : 0),
        }))
      }
    }, 8000)

    return () => clearInterval(interval)
  }, [])

  const startScan = async () => {
    setScanning(true)
    setScanProgress(0)

    for (let i = 0; i <= 100; i += 10) {
      setScanProgress(i)
      await new Promise((resolve) => setTimeout(resolve, 300))
    }

    setScanStats((prev) => ({
      ...prev,
      totalScanned: prev.totalScanned + Math.floor(Math.random() * 100) + 50,
      lastScan: new Date(),
    }))

    setScanning(false)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "text-red-400 border-red-500"
      case "high":
        return "text-orange-400 border-orange-500"
      case "medium":
        return "text-yellow-400 border-yellow-500"
      case "low":
        return "text-green-400 border-green-500"
      default:
        return "text-gray-400 border-gray-500"
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "patched":
        return <CheckCircle className="w-4 h-4 text-green-400" />
      case "investigating":
        return <Search className="w-4 h-4 text-yellow-400" />
      case "open":
        return <XCircle className="w-4 h-4 text-red-400" />
      default:
        return <AlertTriangle className="w-4 h-4 text-gray-400" />
    }
  }

  const formatTime = (date: Date) => {
    const now = new Date()
    const diff = Math.floor((now.getTime() - date.getTime()) / 1000)

    if (diff < 60) return `${diff}s ago`
    if (diff < 3600) return `${Math.floor(diff / 60)}m ago`
    return `${Math.floor(diff / 3600)}h ago`
  }

  return (
    <div className="bg-black/70 border border-green-500/30 rounded-lg p-6 backdrop-blur-sm">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <Bug className="w-6 h-6 text-green-400 mr-3" />
          <h2 className="text-xl font-bold text-green-400 font-mono">VULNERABILITY SCANNER</h2>
        </div>
        <button
          onClick={startScan}
          disabled={scanning}
          className="bg-blue-600 hover:bg-blue-500 disabled:bg-blue-800 text-white font-bold py-2 px-4 rounded-lg transition-colors font-mono text-sm flex items-center space-x-2"
        >
          <Search className="w-4 h-4" />
          <span>{scanning ? "SCANNING..." : "SCAN NOW"}</span>
        </button>
      </div>

      {/* Scan Progress */}
      {scanning && (
        <div className="mb-6">
          <div className="flex justify-between text-sm text-green-300 mb-2">
            <span>Scanning for vulnerabilities...</span>
            <span>{scanProgress}%</span>
          </div>
          <div className="w-full bg-gray-800 rounded-full h-2">
            <div
              className="bg-gradient-to-r from-blue-600 to-blue-400 h-2 rounded-full transition-all duration-300"
              style={{ width: `${scanProgress}%` }}
            />
          </div>
        </div>
      )}

      {/* Scan Statistics */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-gray-900/50 rounded-lg p-3 text-center">
          <div className="text-lg font-bold text-blue-400 font-mono">{scanStats.totalScanned}</div>
          <div className="text-xs text-green-300">TOTAL SCANNED</div>
        </div>
        <div className="bg-gray-900/50 rounded-lg p-3 text-center">
          <div className="text-lg font-bold text-yellow-400 font-mono">{scanStats.vulnerabilitiesFound}</div>
          <div className="text-xs text-green-300">VULNERABILITIES</div>
        </div>
        <div className="bg-gray-900/50 rounded-lg p-3 text-center">
          <div className="text-lg font-bold text-red-400 font-mono">{scanStats.criticalIssues}</div>
          <div className="text-xs text-green-300">CRITICAL</div>
        </div>
        <div className="bg-gray-900/50 rounded-lg p-3 text-center">
          <div className="text-lg font-bold text-green-400 font-mono">{scanStats.patchedIssues}</div>
          <div className="text-xs text-green-300">PATCHED</div>
        </div>
      </div>

      {/* Vulnerability List */}
      <div className="mb-6">
        <h3 className="text-lg font-bold text-green-400 mb-4 font-mono">DISCOVERED VULNERABILITIES</h3>
        <div className="space-y-3 max-h-80 overflow-y-auto">
          {vulnerabilities.map((vuln) => (
            <div key={vuln.id} className="bg-gray-900/50 rounded-lg p-4 border-l-4 border-l-red-500">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center space-x-3">
                  {getStatusIcon(vuln.status)}
                  <div>
                    <div className="text-green-400 font-mono font-bold">{vuln.type}</div>
                    <div className="text-green-300 text-sm">{vuln.location}</div>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <span className={`text-xs px-2 py-1 rounded border ${getSeverityColor(vuln.severity)}`}>
                    {vuln.severity.toUpperCase()}
                  </span>
                  <span className="text-green-300 text-sm">{formatTime(vuln.discovered)}</span>
                </div>
              </div>

              <div className="mb-3">
                <div className="text-green-200 text-sm mb-2">{vuln.description}</div>
                <div className="text-blue-400 text-xs font-mono">CVE: {vuln.cve}</div>
              </div>

              <div className="mb-3">
                <div className="text-green-400 text-xs font-mono mb-1">SOLUTION:</div>
                <div className="text-green-300 text-sm">{vuln.solution}</div>
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <span
                    className={`text-xs px-2 py-1 rounded border ${
                      vuln.status === "patched"
                        ? "border-green-500 text-green-400"
                        : vuln.status === "investigating"
                          ? "border-yellow-500 text-yellow-400"
                          : "border-red-500 text-red-400"
                    }`}
                  >
                    {vuln.status.toUpperCase()}
                  </span>
                </div>
                <div className="flex space-x-2">
                  {vuln.status === "open" && (
                    <button className="bg-green-600 hover:bg-green-500 text-black text-xs px-3 py-1 rounded font-mono">
                      PATCH
                    </button>
                  )}
                  <button className="border border-green-500 text-green-400 hover:bg-green-500/10 text-xs px-3 py-1 rounded font-mono">
                    DETAILS
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Scan Categories */}
      <div className="bg-blue-900/20 border border-blue-500/30 rounded-lg p-4">
        <h4 className="text-lg font-bold text-blue-400 mb-3 font-mono">SCAN CATEGORIES</h4>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="flex items-center space-x-3">
            <Code className="w-5 h-5 text-blue-400" />
            <div>
              <div className="text-blue-400 text-sm font-mono">CODE ANALYSIS</div>
              <div className="text-blue-300 text-xs">Static & Dynamic</div>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <Database className="w-5 h-5 text-blue-400" />
            <div>
              <div className="text-blue-400 text-sm font-mono">DATABASE SECURITY</div>
              <div className="text-blue-300 text-xs">SQL Injection & More</div>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <Lock className="w-5 h-5 text-blue-400" />
            <div>
              <div className="text-blue-400 text-sm font-mono">AUTHENTICATION</div>
              <div className="text-blue-300 text-xs">Access Control</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
